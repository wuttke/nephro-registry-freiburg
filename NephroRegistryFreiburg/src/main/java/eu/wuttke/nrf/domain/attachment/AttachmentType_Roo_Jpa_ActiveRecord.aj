// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package eu.wuttke.nrf.domain.attachment;

import eu.wuttke.nrf.domain.attachment.AttachmentType;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect AttachmentType_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager AttachmentType.entityManager;
    
    public static final EntityManager AttachmentType.entityManager() {
        EntityManager em = new AttachmentType().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long AttachmentType.countAttachmentTypes() {
        return entityManager().createQuery("SELECT COUNT(o) FROM AttachmentType o", Long.class).getSingleResult();
    }
    
    public static List<AttachmentType> AttachmentType.findAllAttachmentTypes() {
        return entityManager().createQuery("SELECT o FROM AttachmentType o", AttachmentType.class).getResultList();
    }
    
    public static AttachmentType AttachmentType.findAttachmentType(Long id) {
        if (id == null) return null;
        return entityManager().find(AttachmentType.class, id);
    }
    
    public static List<AttachmentType> AttachmentType.findAttachmentTypeEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM AttachmentType o", AttachmentType.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void AttachmentType.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void AttachmentType.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            AttachmentType attached = AttachmentType.findAttachmentType(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void AttachmentType.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void AttachmentType.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public AttachmentType AttachmentType.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        AttachmentType merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
