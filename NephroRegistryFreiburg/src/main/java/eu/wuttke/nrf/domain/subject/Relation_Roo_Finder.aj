// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package eu.wuttke.nrf.domain.subject;

import eu.wuttke.nrf.domain.subject.Relation;
import eu.wuttke.nrf.domain.subject.Subject;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Relation_Roo_Finder {
    
    public static TypedQuery<Relation> Relation.findRelationsByFather(Subject father) {
        if (father == null) throw new IllegalArgumentException("The father argument is required");
        EntityManager em = Relation.entityManager();
        TypedQuery<Relation> q = em.createQuery("SELECT o FROM Relation AS o WHERE o.father = :father", Relation.class);
        q.setParameter("father", father);
        return q;
    }
    
    public static TypedQuery<Relation> Relation.findRelationsByMother(Subject mother) {
        if (mother == null) throw new IllegalArgumentException("The mother argument is required");
        EntityManager em = Relation.entityManager();
        TypedQuery<Relation> q = em.createQuery("SELECT o FROM Relation AS o WHERE o.mother = :mother", Relation.class);
        q.setParameter("mother", mother);
        return q;
    }
    
    public static TypedQuery<Relation> Relation.findRelationsBySubject(Subject subject) {
        if (subject == null) throw new IllegalArgumentException("The subject argument is required");
        EntityManager em = Relation.entityManager();
        TypedQuery<Relation> q = em.createQuery("SELECT o FROM Relation AS o WHERE o.subject = :subject", Relation.class);
        q.setParameter("subject", subject);
        return q;
    }
    
}
