package eu.wuttke.nrf.ui.component;

import java.util.Collection;
import java.util.LinkedList;
import java.util.List;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.BeanContainer;
import com.vaadin.data.util.BeanItem;
import com.vaadin.event.FieldEvents.BlurListener;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.event.ShortcutAction;
import com.vaadin.event.ShortcutListener;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import eu.wuttke.nrf.domain.misc.ObjectUtil;
import eu.wuttke.nrf.ui.view.ListView;

public class EditableListComposite<E>
extends CustomComponent 
implements ListView<E> {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;

	@AutoGenerated
	private HorizontalLayout horizontalLayoutFooter;

	@AutoGenerated
	private Button btnDelete;

	@AutoGenerated
	private Button btnEdit;

	@AutoGenerated
	private Button btnNew;

	@AutoGenerated
	private Table table;

	@AutoGenerated
	private HorizontalLayout horizontalLayoutSearch;

	@AutoGenerated
	private Button buttonSearch;

	@AutoGenerated
	private TextField textFieldSearch;

	private BeanContainer<Long, E> container;
	private Class<E> entityClass;
	private List<Button> valueButtons = new LinkedList<Button>();

	public EditableListComposite(Class<E> entityClass) {
		this.entityClass = entityClass;
		
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		btnEdit.setEnabled(false);
		btnDelete.setEnabled(false);
		
		table.setSelectable(true);
		table.setImmediate(true);
		
		table.addValueChangeListener(new Property.ValueChangeListener() {
			private static final long serialVersionUID = 1L;
			@Override
			public void valueChange(ValueChangeEvent event) {
				btnEdit.setEnabled(table.getValue() != null);
				btnDelete.setEnabled(table.getValue() != null);
				for (Button valueButton : valueButtons)
					valueButton.setEnabled(table.getValue() != null);
			}
		});
		
		horizontalLayoutSearch.setVisible(false);
		buttonSearch.setImmediate(true);
	}
	
	public void provideSearchSupport(boolean supportsSearch, final ClickListener clickListener, final BlurListener blurListener) {
		horizontalLayoutSearch.setVisible(supportsSearch);
		textFieldSearch.setImmediate(supportsSearch);
		
		if (clickListener != null)
			buttonSearch.addClickListener(clickListener);
		
		if (blurListener != null) {
			textFieldSearch.addBlurListener(blurListener);
			
			// trigger blur listener on Enter key
			textFieldSearch.addShortcutListener(new ShortcutListener("", ShortcutAction.KeyCode.ENTER, null) {
				private static final long serialVersionUID = 1L;
				@Override
				public void handleAction(Object sender, Object target) {
					blurListener.blur(null);
				}
			});
		}			
	}
	
	public String getSearchQuery() {
		return textFieldSearch.getValue();
	}
	
	public void displayEntities(Collection<E> entities) {
		container = new BeanContainer<Long, E>(entityClass);
		container.setBeanIdProperty(ObjectUtil.getIdPropertyName(entityClass));
		container.addAll(entities);
		table.setContainerDataSource(container);
		initTable();
	}
	
	protected Table getTable() {
		return table;
	}
	
	protected BeanContainer<Long, E> getContainer() {
		return container;
	}
	
	protected void initTable() {
		//table.setVisibleColumns(visibleColumns);
		//table.setColumnHeaders(columnHeaders);
	}
	
	public Button addButton(String caption, ClickListener listener, boolean isValueButton) {
		if (horizontalLayoutFooter.getComponentCount() == 3) {
			// add separator
			Label separator = new Label("|");
			horizontalLayoutFooter.addComponent(separator);
			horizontalLayoutFooter.setComponentAlignment(separator, Alignment.MIDDLE_CENTER);
		}
		
		Button button = new Button();
		button.addClickListener(listener);
		button.setCaption(caption);
		button.setImmediate(true);
		button.setWidth("80px");
		button.setHeight("-1px");
		horizontalLayoutFooter.addComponent(button);
		
		if (isValueButton) {
			button.setEnabled(table.getValue() != null);
			valueButtons.add(button);
		}
		
		return button;
	}

	@Override
	public void addNewButtonClickListener(ClickListener listener) {
		btnNew.addClickListener(listener);
	}
	
	@Override
	public void addEditButtonClickListener(ClickListener listener) {
		btnEdit.addClickListener(listener);
	}
	
	@Override
	public void addDeleteButtonClickListener(ClickListener listener) {
		btnDelete.addClickListener(listener);
	}
	
	@Override
	public void addTableItemClickListener(ItemClickListener listener) {
		table.addItemClickListener(listener);
	}
	
	@Override
	public E getSelectedEntity() {
		if (table.getValue() != null) {
			BeanItem<E> beanItem = container.getItem(table.getValue());
			return beanItem != null ? beanItem.getBean() : null;
		} else
			return null;
	}
	
	private static final long serialVersionUID = 1L;

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// horizontalLayoutSearch
		horizontalLayoutSearch = buildHorizontalLayoutSearch();
		mainLayout.addComponent(horizontalLayoutSearch);
		
		// table
		table = new Table();
		table.setImmediate(false);
		table.setWidth("100.0%");
		table.setHeight("100.0%");
		mainLayout.addComponent(table);
		mainLayout.setExpandRatio(table, 1.0f);
		
		// horizontalLayoutFooter
		horizontalLayoutFooter = buildHorizontalLayoutFooter();
		mainLayout.addComponent(horizontalLayoutFooter);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayoutSearch() {
		// common part: create layout
		horizontalLayoutSearch = new HorizontalLayout();
		horizontalLayoutSearch.setImmediate(false);
		horizontalLayoutSearch.setWidth("100.0%");
		horizontalLayoutSearch.setHeight("-1px");
		horizontalLayoutSearch.setMargin(false);
		horizontalLayoutSearch.setSpacing(true);
		
		// textFieldSearch
		textFieldSearch = new TextField();
		textFieldSearch.setImmediate(false);
		textFieldSearch.setWidth("100.0%");
		textFieldSearch.setHeight("-1px");
		horizontalLayoutSearch.addComponent(textFieldSearch);
		horizontalLayoutSearch.setExpandRatio(textFieldSearch, 1.0f);
		
		// buttonSearch
		buttonSearch = new Button();
		buttonSearch.setCaption("Search");
		buttonSearch.setImmediate(true);
		buttonSearch.setWidth("100px");
		buttonSearch.setHeight("-1px");
		horizontalLayoutSearch.addComponent(buttonSearch);
		
		return horizontalLayoutSearch;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayoutFooter() {
		// common part: create layout
		horizontalLayoutFooter = new HorizontalLayout();
		horizontalLayoutFooter.setImmediate(false);
		horizontalLayoutFooter.setWidth("-1px");
		horizontalLayoutFooter.setHeight("-1px");
		horizontalLayoutFooter.setMargin(false);
		horizontalLayoutFooter.setSpacing(true);
		
		// btnNew
		btnNew = new Button();
		btnNew.setCaption("New");
		btnNew.setImmediate(true);
		btnNew.setWidth("80px");
		btnNew.setHeight("-1px");
		horizontalLayoutFooter.addComponent(btnNew);
		
		// btnEdit
		btnEdit = new Button();
		btnEdit.setCaption("Edit");
		btnEdit.setImmediate(true);
		btnEdit.setWidth("80px");
		btnEdit.setHeight("-1px");
		horizontalLayoutFooter.addComponent(btnEdit);
		
		// btnDelete
		btnDelete = new Button();
		btnDelete.setCaption("Delete");
		btnDelete.setImmediate(true);
		btnDelete.setWidth("80px");
		btnDelete.setHeight("-1px");
		horizontalLayoutFooter.addComponent(btnDelete);
		
		return horizontalLayoutFooter;
	}
	
}
