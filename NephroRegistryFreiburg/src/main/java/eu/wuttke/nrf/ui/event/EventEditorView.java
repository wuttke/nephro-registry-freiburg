package eu.wuttke.nrf.ui.event;

import java.util.Collection;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.fieldgroup.FieldGroup;
import com.vaadin.data.fieldgroup.FieldGroup.CommitException;
import com.vaadin.data.fieldgroup.PropertyId;
import com.vaadin.data.util.BeanItem;
import com.vaadin.ui.CheckBox;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

import eu.wuttke.nrf.domain.encounter.EncounterType;
import eu.wuttke.nrf.domain.event.Event;
import eu.wuttke.nrf.domain.event.EventType;
import eu.wuttke.nrf.ui.misc.StringToPrecisionDateConverter;
import eu.wuttke.nrf.ui.view.EditorView;

public class EventEditorView 
extends CustomComponent
implements EditorView<Event> {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private FormLayout formLayout;
	@AutoGenerated
	@PropertyId("notes")
	private TextArea textAreaNotes;
	@AutoGenerated
	@PropertyId("exclusion")
	private CheckBox checkBoxExclusion;
	@AutoGenerated
	@PropertyId("eventEndDate")
	private TextField tfEventEndDate;
	@AutoGenerated
	@PropertyId("eventStartDate")
	private TextField tfEventStartDate;
	@AutoGenerated
	@PropertyId("type")
	private ComboBox comboBoxType;
	private static final long serialVersionUID = 1L;
	
	private BeanItem<eu.wuttke.nrf.domain.event.Event> beanItem;
	private FieldGroup group;

	public EventEditorView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);
		
		tfEventStartDate.setConverter(new StringToPrecisionDateConverter());
		tfEventEndDate.setConverter(new StringToPrecisionDateConverter());
	}
	
	@Override
	public void displayEntity(eu.wuttke.nrf.domain.event.Event d) {
		beanItem = new BeanItem<eu.wuttke.nrf.domain.event.Event>(d);
		group = new FieldGroup(beanItem);
		group.bindMemberFields(this);
	}

	@Override
	public eu.wuttke.nrf.domain.event.Event retrieveValidatedEntity() {
		try {
			group.commit();
			return beanItem.getBean();
		} catch (CommitException e) {
			e.printStackTrace();
			return null;
		}
	}
	
	public void setEventTypes(Collection<EventType> types) {
		comboBoxType.removeAllItems();
		for (EventType type : types)
			comboBoxType.addItem(type);
	}
	
	@Override
	public boolean isValid() {
		return group.isValid();
	}
	
	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// formLayout
		formLayout = buildFormLayout();
		mainLayout.addComponent(formLayout);
		
		return mainLayout;
	}

	@AutoGenerated
	private FormLayout buildFormLayout() {
		// common part: create layout
		formLayout = new FormLayout();
		formLayout.setImmediate(false);
		formLayout.setWidth("100.0%");
		formLayout.setHeight("100.0%");
		formLayout.setMargin(false);
		formLayout.setSpacing(true);
		
		// comboBoxType
		comboBoxType = new ComboBox();
		comboBoxType.setCaption("Type");
		comboBoxType.setImmediate(false);
		comboBoxType.setWidth("100.0%");
		comboBoxType.setHeight("-1px");
		comboBoxType.setRequired(true);
		formLayout.addComponent(comboBoxType);
		
		// tfEventStartDate
		tfEventStartDate = new TextField();
		tfEventStartDate.setCaption("Event Date");
		tfEventStartDate.setImmediate(true);
		tfEventStartDate.setWidth("100.0%");
		tfEventStartDate.setHeight("-1px");
		formLayout.addComponent(tfEventStartDate);
		
		// tfEventEndDate
		tfEventEndDate = new TextField();
		tfEventEndDate.setCaption("End Date");
		tfEventEndDate.setImmediate(false);
		tfEventEndDate.setWidth("100.0%");
		tfEventEndDate.setHeight("-1px");
		formLayout.addComponent(tfEventEndDate);
		
		// checkBoxExclusion
		checkBoxExclusion = new CheckBox();
		checkBoxExclusion
				.setCaption("Set \"Exclusion\" (event has not occured so far)");
		checkBoxExclusion.setImmediate(false);
		checkBoxExclusion.setWidth("-1px");
		checkBoxExclusion.setHeight("-1px");
		formLayout.addComponent(checkBoxExclusion);
		
		// textAreaNotes
		textAreaNotes = new TextArea();
		textAreaNotes.setCaption("Notes");
		textAreaNotes.setImmediate(false);
		textAreaNotes.setWidth("100.0%");
		textAreaNotes.setHeight("100px");
		formLayout.addComponent(textAreaNotes);
		
		return formLayout;
	}

}
